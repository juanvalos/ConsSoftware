// src/client/index.ts
var NearbyyClient = class {
  API_KEY;
  API_URL;
  CLOUDFRONT_URL;
  constructor(options) {
    this.API_KEY = options.API_KEY;
    this.API_URL = options.API_URL ?? "https://nearbyy.com/api";
    this.CLOUDFRONT_URL = options.CLOUDFRONT_URL ?? "https://dzpv5o2pvfxys.cloudfront.net";
  }
  async uploadFiles(payload) {
    const tag = payload.tag;
    if ("files" in payload) {
      const files = payload.files;
      const presignedUrlResponses = await Promise.all(
        files.map(async (file) => {
          const queryParams = {
            contentType: file.type
          };
          const queryString = Object.entries(queryParams).map(([key, value]) => `${key}=${value}`).join("&");
          const res2 = await fetch(
            `${this.API_URL}/files/get-upload-url?${queryString}`,
            {
              headers: {
                Authorization: `Bearer ${this.API_KEY}`
              }
            }
          );
          const json2 = res2.json();
          return json2;
        })
      );
      const allFileUrls = await Promise.all(
        presignedUrlResponses.map(async (presignedUrlResponse, idx) => {
          if (presignedUrlResponse.success) {
            const { fields, fileId, uploadUrl } = presignedUrlResponse.data;
            const formData = new FormData();
            Object.entries(fields).forEach(([key, value]) => {
              formData.append(key, value);
            });
            formData.append("file", files[idx]);
            await fetch(uploadUrl, {
              method: "POST",
              body: formData
            });
            return `${this.CLOUDFRONT_URL}/${fileId}`;
          }
        })
      );
      const fileUrls = allFileUrls.filter(
        (url) => url !== void 0
      );
      console.log("sending fileUrls", fileUrls);
      const res = await fetch(`${this.API_URL}/files`, {
        headers: {
          Authorization: `Bearer ${this.API_KEY}`
        },
        method: "POST",
        body: JSON.stringify({ fileUrls, tag })
      });
      const json = await res.json();
      return json;
    }
    if ("fileUrls" in payload) {
      const res = await fetch(`${this.API_URL}/files`, {
        headers: {
          Authorization: `Bearer ${this.API_KEY}`
        },
        method: "POST",
        body: JSON.stringify(payload)
      });
      const json = await res.json();
      return json;
    }
    throw new Error(
      "Invalid payload. Neither 'files' nor 'fileUrls' key found."
    );
  }
  async deleteFiles(payload) {
    const res = await fetch(`${this.API_URL}/files`, {
      headers: {
        Authorization: `Bearer ${this.API_KEY}`
      },
      method: "DELETE",
      body: JSON.stringify(payload)
    });
    const json = await res.json();
    return json;
  }
  async semanticSearch(params) {
    const query = Object.entries(params).map(([key, value]) => `${key}=${value}`).join("&");
    const res = await fetch(`${this.API_URL}/chunks?${query}`, {
      headers: {
        Authorization: `Bearer ${this.API_KEY}`
      }
    });
    const data = await res.json();
    return data;
  }
};

// src/api/files/post.ts
import { z as z2 } from "zod";

// src/api/utils.ts
import z from "zod";
var successResponseSchema = z.object({
  success: z.literal(true),
  error: z.null(),
  data: z.unknown()
});
var errorResponseSchema = z.object({
  success: z.literal(false),
  error: z.string(),
  data: z.unknown()
});
var createResponseSchema = ({
  schemaIfSuccess,
  schemaIfError
}) => {
  return z.union([
    successResponseSchema.merge(z.object({ data: schemaIfSuccess })),
    errorResponseSchema.merge(z.object({ data: schemaIfError }))
  ]);
};

// src/api/files/post.ts
var fileEndpointPostResponse = createResponseSchema({
  schemaIfSuccess: z2.object({
    files: z2.array(
      z2.object({
        id: z2.string(),
        url: z2.string()
      })
    )
  }),
  schemaIfError: z2.object({
    files: z2.array(
      z2.object({
        url: z2.string(),
        id: z2.string()
      })
    ),
    rejectedUrls: z2.array(z2.string())
  })
});
var fileEndpointPostBody = z2.object({
  fileUrls: z2.array(z2.string()),
  tag: z2.string().optional()
});

// src/api/files/get.ts
import { z as z3 } from "zod";
var fileEndpointGetResponse = createResponseSchema({
  schemaIfSuccess: z3.object({
    items: z3.array(
      z3.object({
        id: z3.string(),
        text: z3.string(),
        type: z3.string(),
        url: z3.string(),
        _extras: z3.object({
          distance: z3.number().optional(),
          projectid: z3.string()
        })
      })
    )
  }),
  schemaIfError: z3.null()
});
var fileEndpointGetParams = z3.object({
  limit: z3.coerce.number().gt(0).lte(100).int().default(10),
  query: z3.string().min(1)
});

// src/api/files/delete.ts
import { z as z4 } from "zod";
var fileEndpointDeleteResponse = createResponseSchema({
  schemaIfSuccess: z4.object({
    ids: z4.array(z4.string())
  }),
  schemaIfError: z4.object({
    ids: z4.array(z4.string()),
    rejectedIds: z4.array(z4.string())
  })
});
var fileEndpointDeleteBody = z4.object({
  ids: z4.array(z4.string())
});

// src/api/chunks/get.ts
import { z as z5 } from "zod";
var chunkEndpointGetResponse = createResponseSchema({
  schemaIfSuccess: z5.object({
    items: z5.array(
      z5.object({
        chunkId: z5.string(),
        order: z5.number(),
        tokenLength: z5.number(),
        text: z5.string(),
        _extras: z5.object({
          distance: z5.number().optional(),
          fileId: z5.string(),
          projectid: z5.string()
        })
      })
    )
  }),
  schemaIfError: z5.null()
});
var chunkEndpointGetParams = z5.object({
  limit: z5.coerce.number().gt(0).lte(100).int().default(10),
  query: z5.string().min(1),
  tag: z5.string().optional(),
  fileId: z5.string().optional()
});

// src/api/files/get-upload-url/get.ts
import { z as z6 } from "zod";
var getUploadUrlEndpointGetResponse = createResponseSchema({
  schemaIfSuccess: z6.object({
    uploadUrl: z6.string(),
    fileId: z6.string(),
    fields: z6.record(z6.string())
  }),
  schemaIfError: z6.null()
});
var getUploadUrlEndpointGetParams = z6.object({
  contentType: z6.string()
});
export {
  NearbyyClient,
  chunkEndpointGetParams,
  chunkEndpointGetResponse,
  fileEndpointDeleteBody,
  fileEndpointDeleteResponse,
  fileEndpointGetParams,
  fileEndpointGetResponse,
  fileEndpointPostBody,
  fileEndpointPostResponse,
  getUploadUrlEndpointGetParams,
  getUploadUrlEndpointGetResponse
};
