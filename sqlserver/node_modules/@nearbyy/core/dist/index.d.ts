import { z } from 'zod';

declare const fileEndpointPostResponse: z.ZodUnion<[z.ZodObject<{
    success: z.ZodLiteral<true>;
    error: z.ZodNull;
    data: z.ZodObject<{
        files: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            url: string;
        }, {
            id: string;
            url: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        files: {
            id: string;
            url: string;
        }[];
    }, {
        files: {
            id: string;
            url: string;
        }[];
    }>;
}, "strip", z.ZodTypeAny, {
    success: true;
    error: null;
    data: {
        files: {
            id: string;
            url: string;
        }[];
    };
}, {
    success: true;
    error: null;
    data: {
        files: {
            id: string;
            url: string;
        }[];
    };
}>, z.ZodObject<{
    success: z.ZodLiteral<false>;
    error: z.ZodString;
    data: z.ZodObject<{
        files: z.ZodArray<z.ZodObject<{
            url: z.ZodString;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            url: string;
        }, {
            id: string;
            url: string;
        }>, "many">;
        rejectedUrls: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        files: {
            id: string;
            url: string;
        }[];
        rejectedUrls: string[];
    }, {
        files: {
            id: string;
            url: string;
        }[];
        rejectedUrls: string[];
    }>;
}, "strip", z.ZodTypeAny, {
    success: false;
    error: string;
    data: {
        files: {
            id: string;
            url: string;
        }[];
        rejectedUrls: string[];
    };
}, {
    success: false;
    error: string;
    data: {
        files: {
            id: string;
            url: string;
        }[];
        rejectedUrls: string[];
    };
}>]>;
declare const fileEndpointPostBody: z.ZodObject<{
    fileUrls: z.ZodArray<z.ZodString, "many">;
    tag: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    fileUrls: string[];
    tag?: string | undefined;
}, {
    fileUrls: string[];
    tag?: string | undefined;
}>;
type FileEndpointPostResponse = z.infer<typeof fileEndpointPostResponse>;
type FileEndpointPostBody = z.infer<typeof fileEndpointPostBody>;

declare const fileEndpointGetResponse: z.ZodUnion<[z.ZodObject<{
    success: z.ZodLiteral<true>;
    error: z.ZodNull;
    data: z.ZodObject<{
        items: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            text: z.ZodString;
            type: z.ZodString;
            url: z.ZodString;
            _extras: z.ZodObject<{
                distance: z.ZodOptional<z.ZodNumber>;
                projectid: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectid: string;
                distance?: number | undefined;
            }, {
                projectid: string;
                distance?: number | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: string;
            id: string;
            url: string;
            text: string;
            _extras: {
                projectid: string;
                distance?: number | undefined;
            };
        }, {
            type: string;
            id: string;
            url: string;
            text: string;
            _extras: {
                projectid: string;
                distance?: number | undefined;
            };
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        items: {
            type: string;
            id: string;
            url: string;
            text: string;
            _extras: {
                projectid: string;
                distance?: number | undefined;
            };
        }[];
    }, {
        items: {
            type: string;
            id: string;
            url: string;
            text: string;
            _extras: {
                projectid: string;
                distance?: number | undefined;
            };
        }[];
    }>;
}, "strip", z.ZodTypeAny, {
    success: true;
    error: null;
    data: {
        items: {
            type: string;
            id: string;
            url: string;
            text: string;
            _extras: {
                projectid: string;
                distance?: number | undefined;
            };
        }[];
    };
}, {
    success: true;
    error: null;
    data: {
        items: {
            type: string;
            id: string;
            url: string;
            text: string;
            _extras: {
                projectid: string;
                distance?: number | undefined;
            };
        }[];
    };
}>, z.ZodObject<{
    success: z.ZodLiteral<false>;
    error: z.ZodString;
    data: z.ZodNull;
}, "strip", z.ZodTypeAny, {
    success: false;
    error: string;
    data: null;
}, {
    success: false;
    error: string;
    data: null;
}>]>;
declare const fileEndpointGetParams: z.ZodObject<{
    limit: z.ZodDefault<z.ZodNumber>;
    query: z.ZodString;
}, "strip", z.ZodTypeAny, {
    limit: number;
    query: string;
}, {
    query: string;
    limit?: number | undefined;
}>;
type FileEndpointGetResponse = z.infer<typeof fileEndpointGetResponse>;
type FileEndpointGetParams = z.infer<typeof fileEndpointGetParams>;

declare const fileEndpointDeleteResponse: z.ZodUnion<[z.ZodObject<{
    success: z.ZodLiteral<true>;
    error: z.ZodNull;
    data: z.ZodObject<{
        ids: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        ids: string[];
    }, {
        ids: string[];
    }>;
}, "strip", z.ZodTypeAny, {
    success: true;
    error: null;
    data: {
        ids: string[];
    };
}, {
    success: true;
    error: null;
    data: {
        ids: string[];
    };
}>, z.ZodObject<{
    success: z.ZodLiteral<false>;
    error: z.ZodString;
    data: z.ZodObject<{
        ids: z.ZodArray<z.ZodString, "many">;
        rejectedIds: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        ids: string[];
        rejectedIds: string[];
    }, {
        ids: string[];
        rejectedIds: string[];
    }>;
}, "strip", z.ZodTypeAny, {
    success: false;
    error: string;
    data: {
        ids: string[];
        rejectedIds: string[];
    };
}, {
    success: false;
    error: string;
    data: {
        ids: string[];
        rejectedIds: string[];
    };
}>]>;
declare const fileEndpointDeleteBody: z.ZodObject<{
    ids: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    ids: string[];
}, {
    ids: string[];
}>;
type FileEndpointDeleteResponse = z.infer<typeof fileEndpointDeleteResponse>;
type FileEndpointDeleteBody = z.infer<typeof fileEndpointDeleteBody>;

declare const chunkEndpointGetResponse: z.ZodUnion<[z.ZodObject<{
    success: z.ZodLiteral<true>;
    error: z.ZodNull;
    data: z.ZodObject<{
        items: z.ZodArray<z.ZodObject<{
            chunkId: z.ZodString;
            order: z.ZodNumber;
            tokenLength: z.ZodNumber;
            text: z.ZodString;
            _extras: z.ZodObject<{
                distance: z.ZodOptional<z.ZodNumber>;
                fileId: z.ZodString;
                projectid: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                projectid: string;
                fileId: string;
                distance?: number | undefined;
            }, {
                projectid: string;
                fileId: string;
                distance?: number | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            text: string;
            _extras: {
                projectid: string;
                fileId: string;
                distance?: number | undefined;
            };
            chunkId: string;
            order: number;
            tokenLength: number;
        }, {
            text: string;
            _extras: {
                projectid: string;
                fileId: string;
                distance?: number | undefined;
            };
            chunkId: string;
            order: number;
            tokenLength: number;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        items: {
            text: string;
            _extras: {
                projectid: string;
                fileId: string;
                distance?: number | undefined;
            };
            chunkId: string;
            order: number;
            tokenLength: number;
        }[];
    }, {
        items: {
            text: string;
            _extras: {
                projectid: string;
                fileId: string;
                distance?: number | undefined;
            };
            chunkId: string;
            order: number;
            tokenLength: number;
        }[];
    }>;
}, "strip", z.ZodTypeAny, {
    success: true;
    error: null;
    data: {
        items: {
            text: string;
            _extras: {
                projectid: string;
                fileId: string;
                distance?: number | undefined;
            };
            chunkId: string;
            order: number;
            tokenLength: number;
        }[];
    };
}, {
    success: true;
    error: null;
    data: {
        items: {
            text: string;
            _extras: {
                projectid: string;
                fileId: string;
                distance?: number | undefined;
            };
            chunkId: string;
            order: number;
            tokenLength: number;
        }[];
    };
}>, z.ZodObject<{
    success: z.ZodLiteral<false>;
    error: z.ZodString;
    data: z.ZodNull;
}, "strip", z.ZodTypeAny, {
    success: false;
    error: string;
    data: null;
}, {
    success: false;
    error: string;
    data: null;
}>]>;
declare const chunkEndpointGetParams: z.ZodObject<{
    limit: z.ZodDefault<z.ZodNumber>;
    query: z.ZodString;
    tag: z.ZodOptional<z.ZodString>;
    fileId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    limit: number;
    query: string;
    tag?: string | undefined;
    fileId?: string | undefined;
}, {
    query: string;
    limit?: number | undefined;
    tag?: string | undefined;
    fileId?: string | undefined;
}>;
type ChunkEndpointGetResponse = z.infer<typeof chunkEndpointGetResponse>;
type ChunkEndpointGetParams = z.infer<typeof chunkEndpointGetParams>;

declare const getUploadUrlEndpointGetResponse: z.ZodUnion<[z.ZodObject<{
    success: z.ZodLiteral<true>;
    error: z.ZodNull;
    data: z.ZodObject<{
        uploadUrl: z.ZodString;
        fileId: z.ZodString;
        fields: z.ZodRecord<z.ZodString, z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        fileId: string;
        uploadUrl: string;
        fields: Record<string, string>;
    }, {
        fileId: string;
        uploadUrl: string;
        fields: Record<string, string>;
    }>;
}, "strip", z.ZodTypeAny, {
    success: true;
    error: null;
    data: {
        fileId: string;
        uploadUrl: string;
        fields: Record<string, string>;
    };
}, {
    success: true;
    error: null;
    data: {
        fileId: string;
        uploadUrl: string;
        fields: Record<string, string>;
    };
}>, z.ZodObject<{
    success: z.ZodLiteral<false>;
    error: z.ZodString;
    data: z.ZodNull;
}, "strip", z.ZodTypeAny, {
    success: false;
    error: string;
    data: null;
}, {
    success: false;
    error: string;
    data: null;
}>]>;
declare const getUploadUrlEndpointGetParams: z.ZodObject<{
    contentType: z.ZodString;
}, "strip", z.ZodTypeAny, {
    contentType: string;
}, {
    contentType: string;
}>;
type GetUploadUrlEndpointGetResponse = z.infer<typeof getUploadUrlEndpointGetResponse>;
type GetUploadUrlEndpointGetParams = z.infer<typeof getUploadUrlEndpointGetParams>;

declare class NearbyyClient {
    API_KEY: string;
    API_URL: string;
    CLOUDFRONT_URL: string;
    constructor(options: {
        API_KEY: string;
        API_URL?: string;
        CLOUDFRONT_URL?: string;
    });
    uploadFiles(payload: {
        files: File[];
        tag?: string;
    } | {
        fileUrls: string[];
        tag?: string;
    }): Promise<FileEndpointPostResponse>;
    deleteFiles(payload: FileEndpointDeleteBody): Promise<{
        success: true;
        error: null;
        data: {
            ids: string[];
        };
    } | {
        success: false;
        error: string;
        data: {
            ids: string[];
            rejectedIds: string[];
        };
    }>;
    semanticSearch(params: ChunkEndpointGetParams): Promise<{
        success: true;
        error: null;
        data: {
            items: {
                text: string;
                _extras: {
                    projectid: string;
                    fileId: string;
                    distance?: number | undefined;
                };
                chunkId: string;
                order: number;
                tokenLength: number;
            }[];
        };
    } | {
        success: false;
        error: string;
        data: null;
    }>;
}

export { type ChunkEndpointGetParams, type ChunkEndpointGetResponse, type FileEndpointDeleteBody, type FileEndpointDeleteResponse, type FileEndpointGetParams, type FileEndpointGetResponse, type FileEndpointPostBody, type FileEndpointPostResponse, type GetUploadUrlEndpointGetParams, type GetUploadUrlEndpointGetResponse, NearbyyClient, chunkEndpointGetParams, chunkEndpointGetResponse, fileEndpointDeleteBody, fileEndpointDeleteResponse, fileEndpointGetParams, fileEndpointGetResponse, fileEndpointPostBody, fileEndpointPostResponse, getUploadUrlEndpointGetParams, getUploadUrlEndpointGetResponse };
