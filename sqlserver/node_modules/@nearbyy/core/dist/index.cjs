"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  NearbyyClient: () => NearbyyClient,
  chunkEndpointGetParams: () => chunkEndpointGetParams,
  chunkEndpointGetResponse: () => chunkEndpointGetResponse,
  fileEndpointDeleteBody: () => fileEndpointDeleteBody,
  fileEndpointDeleteResponse: () => fileEndpointDeleteResponse,
  fileEndpointGetParams: () => fileEndpointGetParams,
  fileEndpointGetResponse: () => fileEndpointGetResponse,
  fileEndpointPostBody: () => fileEndpointPostBody,
  fileEndpointPostResponse: () => fileEndpointPostResponse,
  getUploadUrlEndpointGetParams: () => getUploadUrlEndpointGetParams,
  getUploadUrlEndpointGetResponse: () => getUploadUrlEndpointGetResponse
});
module.exports = __toCommonJS(src_exports);

// src/client/index.ts
var NearbyyClient = class {
  API_KEY;
  API_URL;
  CLOUDFRONT_URL;
  constructor(options) {
    this.API_KEY = options.API_KEY;
    this.API_URL = options.API_URL ?? "https://nearbyy.com/api";
    this.CLOUDFRONT_URL = options.CLOUDFRONT_URL ?? "https://dzpv5o2pvfxys.cloudfront.net";
  }
  async uploadFiles(payload) {
    const tag = payload.tag;
    if ("files" in payload) {
      const files = payload.files;
      const presignedUrlResponses = await Promise.all(
        files.map(async (file) => {
          const queryParams = {
            contentType: file.type
          };
          const queryString = Object.entries(queryParams).map(([key, value]) => `${key}=${value}`).join("&");
          const res2 = await fetch(
            `${this.API_URL}/files/get-upload-url?${queryString}`,
            {
              headers: {
                Authorization: `Bearer ${this.API_KEY}`
              }
            }
          );
          const json2 = res2.json();
          return json2;
        })
      );
      const allFileUrls = await Promise.all(
        presignedUrlResponses.map(async (presignedUrlResponse, idx) => {
          if (presignedUrlResponse.success) {
            const { fields, fileId, uploadUrl } = presignedUrlResponse.data;
            const formData = new FormData();
            Object.entries(fields).forEach(([key, value]) => {
              formData.append(key, value);
            });
            formData.append("file", files[idx]);
            await fetch(uploadUrl, {
              method: "POST",
              body: formData
            });
            return `${this.CLOUDFRONT_URL}/${fileId}`;
          }
        })
      );
      const fileUrls = allFileUrls.filter(
        (url) => url !== void 0
      );
      console.log("sending fileUrls", fileUrls);
      const res = await fetch(`${this.API_URL}/files`, {
        headers: {
          Authorization: `Bearer ${this.API_KEY}`
        },
        method: "POST",
        body: JSON.stringify({ fileUrls, tag })
      });
      const json = await res.json();
      return json;
    }
    if ("fileUrls" in payload) {
      const res = await fetch(`${this.API_URL}/files`, {
        headers: {
          Authorization: `Bearer ${this.API_KEY}`
        },
        method: "POST",
        body: JSON.stringify(payload)
      });
      const json = await res.json();
      return json;
    }
    throw new Error(
      "Invalid payload. Neither 'files' nor 'fileUrls' key found."
    );
  }
  async deleteFiles(payload) {
    const res = await fetch(`${this.API_URL}/files`, {
      headers: {
        Authorization: `Bearer ${this.API_KEY}`
      },
      method: "DELETE",
      body: JSON.stringify(payload)
    });
    const json = await res.json();
    return json;
  }
  async semanticSearch(params) {
    const query = Object.entries(params).map(([key, value]) => `${key}=${value}`).join("&");
    const res = await fetch(`${this.API_URL}/chunks?${query}`, {
      headers: {
        Authorization: `Bearer ${this.API_KEY}`
      }
    });
    const data = await res.json();
    return data;
  }
};

// src/api/files/post.ts
var import_zod2 = require("zod");

// src/api/utils.ts
var import_zod = __toESM(require("zod"), 1);
var successResponseSchema = import_zod.default.object({
  success: import_zod.default.literal(true),
  error: import_zod.default.null(),
  data: import_zod.default.unknown()
});
var errorResponseSchema = import_zod.default.object({
  success: import_zod.default.literal(false),
  error: import_zod.default.string(),
  data: import_zod.default.unknown()
});
var createResponseSchema = ({
  schemaIfSuccess,
  schemaIfError
}) => {
  return import_zod.default.union([
    successResponseSchema.merge(import_zod.default.object({ data: schemaIfSuccess })),
    errorResponseSchema.merge(import_zod.default.object({ data: schemaIfError }))
  ]);
};

// src/api/files/post.ts
var fileEndpointPostResponse = createResponseSchema({
  schemaIfSuccess: import_zod2.z.object({
    files: import_zod2.z.array(
      import_zod2.z.object({
        id: import_zod2.z.string(),
        url: import_zod2.z.string()
      })
    )
  }),
  schemaIfError: import_zod2.z.object({
    files: import_zod2.z.array(
      import_zod2.z.object({
        url: import_zod2.z.string(),
        id: import_zod2.z.string()
      })
    ),
    rejectedUrls: import_zod2.z.array(import_zod2.z.string())
  })
});
var fileEndpointPostBody = import_zod2.z.object({
  fileUrls: import_zod2.z.array(import_zod2.z.string()),
  tag: import_zod2.z.string().optional()
});

// src/api/files/get.ts
var import_zod3 = require("zod");
var fileEndpointGetResponse = createResponseSchema({
  schemaIfSuccess: import_zod3.z.object({
    items: import_zod3.z.array(
      import_zod3.z.object({
        id: import_zod3.z.string(),
        text: import_zod3.z.string(),
        type: import_zod3.z.string(),
        url: import_zod3.z.string(),
        _extras: import_zod3.z.object({
          distance: import_zod3.z.number().optional(),
          projectid: import_zod3.z.string()
        })
      })
    )
  }),
  schemaIfError: import_zod3.z.null()
});
var fileEndpointGetParams = import_zod3.z.object({
  limit: import_zod3.z.coerce.number().gt(0).lte(100).int().default(10),
  query: import_zod3.z.string().min(1)
});

// src/api/files/delete.ts
var import_zod4 = require("zod");
var fileEndpointDeleteResponse = createResponseSchema({
  schemaIfSuccess: import_zod4.z.object({
    ids: import_zod4.z.array(import_zod4.z.string())
  }),
  schemaIfError: import_zod4.z.object({
    ids: import_zod4.z.array(import_zod4.z.string()),
    rejectedIds: import_zod4.z.array(import_zod4.z.string())
  })
});
var fileEndpointDeleteBody = import_zod4.z.object({
  ids: import_zod4.z.array(import_zod4.z.string())
});

// src/api/chunks/get.ts
var import_zod5 = require("zod");
var chunkEndpointGetResponse = createResponseSchema({
  schemaIfSuccess: import_zod5.z.object({
    items: import_zod5.z.array(
      import_zod5.z.object({
        chunkId: import_zod5.z.string(),
        order: import_zod5.z.number(),
        tokenLength: import_zod5.z.number(),
        text: import_zod5.z.string(),
        _extras: import_zod5.z.object({
          distance: import_zod5.z.number().optional(),
          fileId: import_zod5.z.string(),
          projectid: import_zod5.z.string()
        })
      })
    )
  }),
  schemaIfError: import_zod5.z.null()
});
var chunkEndpointGetParams = import_zod5.z.object({
  limit: import_zod5.z.coerce.number().gt(0).lte(100).int().default(10),
  query: import_zod5.z.string().min(1),
  tag: import_zod5.z.string().optional(),
  fileId: import_zod5.z.string().optional()
});

// src/api/files/get-upload-url/get.ts
var import_zod6 = require("zod");
var getUploadUrlEndpointGetResponse = createResponseSchema({
  schemaIfSuccess: import_zod6.z.object({
    uploadUrl: import_zod6.z.string(),
    fileId: import_zod6.z.string(),
    fields: import_zod6.z.record(import_zod6.z.string())
  }),
  schemaIfError: import_zod6.z.null()
});
var getUploadUrlEndpointGetParams = import_zod6.z.object({
  contentType: import_zod6.z.string()
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  NearbyyClient,
  chunkEndpointGetParams,
  chunkEndpointGetResponse,
  fileEndpointDeleteBody,
  fileEndpointDeleteResponse,
  fileEndpointGetParams,
  fileEndpointGetResponse,
  fileEndpointPostBody,
  fileEndpointPostResponse,
  getUploadUrlEndpointGetParams,
  getUploadUrlEndpointGetResponse
});
